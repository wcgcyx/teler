// Code generated by MockGen. DO NOT EDIT.
// Source: worldstate.go
//
// Generated by this command:
//
//	mockgen -source=worldstate.go -destination=worldstate_mock.go -self_package=github.com/wcgcyx/teler/worldstate --package worldstate
//

// Package worldstate is a generated GoMock package.
package worldstate

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	state "github.com/ethereum/go-ethereum/core/state"
	stateless "github.com/ethereum/go-ethereum/core/stateless"
	tracing "github.com/ethereum/go-ethereum/core/tracing"
	types "github.com/ethereum/go-ethereum/core/types"
	params "github.com/ethereum/go-ethereum/params"
	utils "github.com/ethereum/go-ethereum/trie/utils"
	uint256 "github.com/holiman/uint256"
	types0 "github.com/wcgcyx/teler/types"
	gomock "go.uber.org/mock/gomock"
)

// MockWorldState is a mock of WorldState interface.
type MockWorldState struct {
	ctrl     *gomock.Controller
	recorder *MockWorldStateMockRecorder
	isgomock struct{}
}

// MockWorldStateMockRecorder is the mock recorder for MockWorldState.
type MockWorldStateMockRecorder struct {
	mock *MockWorldState
}

// NewMockWorldState creates a new mock instance.
func NewMockWorldState(ctrl *gomock.Controller) *MockWorldState {
	mock := &MockWorldState{ctrl: ctrl}
	mock.recorder = &MockWorldStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorldState) EXPECT() *MockWorldStateMockRecorder {
	return m.recorder
}

// AccessEvents mocks base method.
func (m *MockWorldState) AccessEvents() *state.AccessEvents {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessEvents")
	ret0, _ := ret[0].(*state.AccessEvents)
	return ret0
}

// AccessEvents indicates an expected call of AccessEvents.
func (mr *MockWorldStateMockRecorder) AccessEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessEvents", reflect.TypeOf((*MockWorldState)(nil).AccessEvents))
}

// AddAddressToAccessList mocks base method.
func (m *MockWorldState) AddAddressToAccessList(addr common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToAccessList", addr)
}

// AddAddressToAccessList indicates an expected call of AddAddressToAccessList.
func (mr *MockWorldStateMockRecorder) AddAddressToAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToAccessList", reflect.TypeOf((*MockWorldState)(nil).AddAddressToAccessList), addr)
}

// AddBalance mocks base method.
func (m *MockWorldState) AddBalance(arg0 common.Address, arg1 *uint256.Int, arg2 tracing.BalanceChangeReason) uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint256.Int)
	return ret0
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockWorldStateMockRecorder) AddBalance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockWorldState)(nil).AddBalance), arg0, arg1, arg2)
}

// AddLog mocks base method.
func (m *MockWorldState) AddLog(arg0 *types.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", arg0)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockWorldStateMockRecorder) AddLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockWorldState)(nil).AddLog), arg0)
}

// AddPreimage mocks base method.
func (m *MockWorldState) AddPreimage(arg0 common.Hash, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreimage", arg0, arg1)
}

// AddPreimage indicates an expected call of AddPreimage.
func (mr *MockWorldStateMockRecorder) AddPreimage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreimage", reflect.TypeOf((*MockWorldState)(nil).AddPreimage), arg0, arg1)
}

// AddRefund mocks base method.
func (m *MockWorldState) AddRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRefund", arg0)
}

// AddRefund indicates an expected call of AddRefund.
func (mr *MockWorldStateMockRecorder) AddRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefund", reflect.TypeOf((*MockWorldState)(nil).AddRefund), arg0)
}

// AddSlotToAccessList mocks base method.
func (m *MockWorldState) AddSlotToAccessList(addr common.Address, slot common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToAccessList", addr, slot)
}

// AddSlotToAccessList indicates an expected call of AddSlotToAccessList.
func (mr *MockWorldStateMockRecorder) AddSlotToAccessList(addr, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToAccessList", reflect.TypeOf((*MockWorldState)(nil).AddSlotToAccessList), addr, slot)
}

// AddressInAccessList mocks base method.
func (m *MockWorldState) AddressInAccessList(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressInAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressInAccessList indicates an expected call of AddressInAccessList.
func (mr *MockWorldStateMockRecorder) AddressInAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressInAccessList", reflect.TypeOf((*MockWorldState)(nil).AddressInAccessList), addr)
}

// CreateAccount mocks base method.
func (m *MockWorldState) CreateAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockWorldStateMockRecorder) CreateAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockWorldState)(nil).CreateAccount), arg0)
}

// CreateContract mocks base method.
func (m *MockWorldState) CreateContract(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateContract", arg0)
}

// CreateContract indicates an expected call of CreateContract.
func (mr *MockWorldStateMockRecorder) CreateContract(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContract", reflect.TypeOf((*MockWorldState)(nil).CreateContract), arg0)
}

// Empty mocks base method.
func (m *MockWorldState) Empty(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockWorldStateMockRecorder) Empty(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockWorldState)(nil).Empty), arg0)
}

// Exist mocks base method.
func (m *MockWorldState) Exist(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockWorldStateMockRecorder) Exist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockWorldState)(nil).Exist), arg0)
}

// Finalise mocks base method.
func (m *MockWorldState) Finalise(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalise", arg0)
}

// Finalise indicates an expected call of Finalise.
func (mr *MockWorldStateMockRecorder) Finalise(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalise", reflect.TypeOf((*MockWorldState)(nil).Finalise), arg0)
}

// GetBalance mocks base method.
func (m *MockWorldState) GetBalance(arg0 common.Address) *uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*uint256.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWorldStateMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWorldState)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockWorldState) GetCode(arg0 common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockWorldStateMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockWorldState)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockWorldState) GetCodeHash(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockWorldStateMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockWorldState)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockWorldState) GetCodeSize(arg0 common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockWorldStateMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockWorldState)(nil).GetCodeSize), arg0)
}

// GetCommittedState mocks base method.
func (m *MockWorldState) GetCommittedState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockWorldStateMockRecorder) GetCommittedState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockWorldState)(nil).GetCommittedState), arg0, arg1)
}

// GetLogs mocks base method.
func (m *MockWorldState) GetLogs(hash common.Hash, blockNumber uint64, blockHash common.Hash) []*types.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", hash, blockNumber, blockHash)
	ret0, _ := ret[0].([]*types.Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockWorldStateMockRecorder) GetLogs(hash, blockNumber, blockHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockWorldState)(nil).GetLogs), hash, blockNumber, blockHash)
}

// GetNonce mocks base method.
func (m *MockWorldState) GetNonce(arg0 common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockWorldStateMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockWorldState)(nil).GetNonce), arg0)
}

// GetRefund mocks base method.
func (m *MockWorldState) GetRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockWorldStateMockRecorder) GetRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockWorldState)(nil).GetRefund))
}

// GetState mocks base method.
func (m *MockWorldState) GetState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockWorldStateMockRecorder) GetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockWorldState)(nil).GetState), arg0, arg1)
}

// GetStorageRoot mocks base method.
func (m *MockWorldState) GetStorageRoot(addr common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageRoot", addr)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetStorageRoot indicates an expected call of GetStorageRoot.
func (mr *MockWorldStateMockRecorder) GetStorageRoot(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageRoot", reflect.TypeOf((*MockWorldState)(nil).GetStorageRoot), addr)
}

// GetTransientState mocks base method.
func (m *MockWorldState) GetTransientState(addr common.Address, key common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransientState", addr, key)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetTransientState indicates an expected call of GetTransientState.
func (mr *MockWorldStateMockRecorder) GetTransientState(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransientState", reflect.TypeOf((*MockWorldState)(nil).GetTransientState), addr, key)
}

// HasSelfDestructed mocks base method.
func (m *MockWorldState) HasSelfDestructed(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSelfDestructed", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSelfDestructed indicates an expected call of HasSelfDestructed.
func (mr *MockWorldStateMockRecorder) HasSelfDestructed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSelfDestructed", reflect.TypeOf((*MockWorldState)(nil).HasSelfDestructed), arg0)
}

// IntermediateRoot mocks base method.
func (m *MockWorldState) IntermediateRoot(deleteEmptyObjects bool) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntermediateRoot", deleteEmptyObjects)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// IntermediateRoot indicates an expected call of IntermediateRoot.
func (mr *MockWorldStateMockRecorder) IntermediateRoot(deleteEmptyObjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntermediateRoot", reflect.TypeOf((*MockWorldState)(nil).IntermediateRoot), deleteEmptyObjects)
}

// PointCache mocks base method.
func (m *MockWorldState) PointCache() *utils.PointCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PointCache")
	ret0, _ := ret[0].(*utils.PointCache)
	return ret0
}

// PointCache indicates an expected call of PointCache.
func (mr *MockWorldStateMockRecorder) PointCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PointCache", reflect.TypeOf((*MockWorldState)(nil).PointCache))
}

// Prepare mocks base method.
func (m *MockWorldState) Prepare(rules params.Rules, sender, coinbase common.Address, dest *common.Address, precompiles []common.Address, txAccesses types.AccessList) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Prepare", rules, sender, coinbase, dest, precompiles, txAccesses)
}

// Prepare indicates an expected call of Prepare.
func (mr *MockWorldStateMockRecorder) Prepare(rules, sender, coinbase, dest, precompiles, txAccesses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockWorldState)(nil).Prepare), rules, sender, coinbase, dest, precompiles, txAccesses)
}

// RevertToSnapshot mocks base method.
func (m *MockWorldState) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockWorldStateMockRecorder) RevertToSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockWorldState)(nil).RevertToSnapshot), arg0)
}

// SelfDestruct mocks base method.
func (m *MockWorldState) SelfDestruct(arg0 common.Address) uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct", arg0)
	ret0, _ := ret[0].(uint256.Int)
	return ret0
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockWorldStateMockRecorder) SelfDestruct(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockWorldState)(nil).SelfDestruct), arg0)
}

// SelfDestruct6780 mocks base method.
func (m *MockWorldState) SelfDestruct6780(arg0 common.Address) (uint256.Int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct6780", arg0)
	ret0, _ := ret[0].(uint256.Int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SelfDestruct6780 indicates an expected call of SelfDestruct6780.
func (mr *MockWorldStateMockRecorder) SelfDestruct6780(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct6780", reflect.TypeOf((*MockWorldState)(nil).SelfDestruct6780), arg0)
}

// SetBalance mocks base method.
func (m *MockWorldState) SetBalance(addr common.Address, amount *uint256.Int, reason tracing.BalanceChangeReason) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", addr, amount, reason)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockWorldStateMockRecorder) SetBalance(addr, amount, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockWorldState)(nil).SetBalance), addr, amount, reason)
}

// SetCode mocks base method.
func (m *MockWorldState) SetCode(arg0 common.Address, arg1 []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCode", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// SetCode indicates an expected call of SetCode.
func (mr *MockWorldStateMockRecorder) SetCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockWorldState)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockWorldState) SetNonce(arg0 common.Address, arg1 uint64, arg2 tracing.NonceChangeReason) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1, arg2)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockWorldStateMockRecorder) SetNonce(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockWorldState)(nil).SetNonce), arg0, arg1, arg2)
}

// SetState mocks base method.
func (m *MockWorldState) SetState(arg0 common.Address, arg1, arg2 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockWorldStateMockRecorder) SetState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockWorldState)(nil).SetState), arg0, arg1, arg2)
}

// SetTransientState mocks base method.
func (m *MockWorldState) SetTransientState(addr common.Address, key, value common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransientState", addr, key, value)
}

// SetTransientState indicates an expected call of SetTransientState.
func (mr *MockWorldStateMockRecorder) SetTransientState(addr, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransientState", reflect.TypeOf((*MockWorldState)(nil).SetTransientState), addr, key, value)
}

// SetTxContext mocks base method.
func (m *MockWorldState) SetTxContext(thash common.Hash, ti int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTxContext", thash, ti)
}

// SetTxContext indicates an expected call of SetTxContext.
func (mr *MockWorldStateMockRecorder) SetTxContext(thash, ti any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxContext", reflect.TypeOf((*MockWorldState)(nil).SetTxContext), thash, ti)
}

// SlotInAccessList mocks base method.
func (m *MockWorldState) SlotInAccessList(addr common.Address, slot common.Hash) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotInAccessList", addr, slot)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SlotInAccessList indicates an expected call of SlotInAccessList.
func (mr *MockWorldStateMockRecorder) SlotInAccessList(addr, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotInAccessList", reflect.TypeOf((*MockWorldState)(nil).SlotInAccessList), addr, slot)
}

// Snapshot mocks base method.
func (m *MockWorldState) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockWorldStateMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockWorldState)(nil).Snapshot))
}

// SubBalance mocks base method.
func (m *MockWorldState) SubBalance(arg0 common.Address, arg1 *uint256.Int, arg2 tracing.BalanceChangeReason) uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint256.Int)
	return ret0
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockWorldStateMockRecorder) SubBalance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockWorldState)(nil).SubBalance), arg0, arg1, arg2)
}

// SubRefund mocks base method.
func (m *MockWorldState) SubRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubRefund", arg0)
}

// SubRefund indicates an expected call of SubRefund.
func (mr *MockWorldStateMockRecorder) SubRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRefund", reflect.TypeOf((*MockWorldState)(nil).SubRefund), arg0)
}

// TxIndex mocks base method.
func (m *MockWorldState) TxIndex() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxIndex")
	ret0, _ := ret[0].(int)
	return ret0
}

// TxIndex indicates an expected call of TxIndex.
func (mr *MockWorldStateMockRecorder) TxIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxIndex", reflect.TypeOf((*MockWorldState)(nil).TxIndex))
}

// Witness mocks base method.
func (m *MockWorldState) Witness() *stateless.Witness {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Witness")
	ret0, _ := ret[0].(*stateless.Witness)
	return ret0
}

// Witness indicates an expected call of Witness.
func (mr *MockWorldStateMockRecorder) Witness() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Witness", reflect.TypeOf((*MockWorldState)(nil).Witness))
}

// MockReadOnlyWorldState is a mock of ReadOnlyWorldState interface.
type MockReadOnlyWorldState struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyWorldStateMockRecorder
	isgomock struct{}
}

// MockReadOnlyWorldStateMockRecorder is the mock recorder for MockReadOnlyWorldState.
type MockReadOnlyWorldStateMockRecorder struct {
	mock *MockReadOnlyWorldState
}

// NewMockReadOnlyWorldState creates a new mock instance.
func NewMockReadOnlyWorldState(ctrl *gomock.Controller) *MockReadOnlyWorldState {
	mock := &MockReadOnlyWorldState{ctrl: ctrl}
	mock.recorder = &MockReadOnlyWorldStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadOnlyWorldState) EXPECT() *MockReadOnlyWorldStateMockRecorder {
	return m.recorder
}

// Empty mocks base method.
func (m *MockReadOnlyWorldState) Empty(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockReadOnlyWorldStateMockRecorder) Empty(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockReadOnlyWorldState)(nil).Empty), addr)
}

// Exist mocks base method.
func (m *MockReadOnlyWorldState) Exist(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockReadOnlyWorldStateMockRecorder) Exist(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockReadOnlyWorldState)(nil).Exist), addr)
}

// GetBalance mocks base method.
func (m *MockReadOnlyWorldState) GetBalance(addr common.Address) *uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", addr)
	ret0, _ := ret[0].(*uint256.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockReadOnlyWorldStateMockRecorder) GetBalance(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockReadOnlyWorldState)(nil).GetBalance), addr)
}

// GetCode mocks base method.
func (m *MockReadOnlyWorldState) GetCode(addr common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", addr)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockReadOnlyWorldStateMockRecorder) GetCode(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockReadOnlyWorldState)(nil).GetCode), addr)
}

// GetCodeHash mocks base method.
func (m *MockReadOnlyWorldState) GetCodeHash(addr common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", addr)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockReadOnlyWorldStateMockRecorder) GetCodeHash(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockReadOnlyWorldState)(nil).GetCodeHash), addr)
}

// GetCodeSize mocks base method.
func (m *MockReadOnlyWorldState) GetCodeSize(addr common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", addr)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockReadOnlyWorldStateMockRecorder) GetCodeSize(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockReadOnlyWorldState)(nil).GetCodeSize), addr)
}

// GetNonce mocks base method.
func (m *MockReadOnlyWorldState) GetNonce(addr common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", addr)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockReadOnlyWorldStateMockRecorder) GetNonce(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockReadOnlyWorldState)(nil).GetNonce), addr)
}

// GetState mocks base method.
func (m *MockReadOnlyWorldState) GetState(addr common.Address, key common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", addr, key)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockReadOnlyWorldStateMockRecorder) GetState(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockReadOnlyWorldState)(nil).GetState), addr, key)
}

// GetStorageRoot mocks base method.
func (m *MockReadOnlyWorldState) GetStorageRoot(addr common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageRoot", addr)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetStorageRoot indicates an expected call of GetStorageRoot.
func (mr *MockReadOnlyWorldStateMockRecorder) GetStorageRoot(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageRoot", reflect.TypeOf((*MockReadOnlyWorldState)(nil).GetStorageRoot), addr)
}

// MockMutableWorldState is a mock of MutableWorldState interface.
type MockMutableWorldState struct {
	ctrl     *gomock.Controller
	recorder *MockMutableWorldStateMockRecorder
	isgomock struct{}
}

// MockMutableWorldStateMockRecorder is the mock recorder for MockMutableWorldState.
type MockMutableWorldStateMockRecorder struct {
	mock *MockMutableWorldState
}

// NewMockMutableWorldState creates a new mock instance.
func NewMockMutableWorldState(ctrl *gomock.Controller) *MockMutableWorldState {
	mock := &MockMutableWorldState{ctrl: ctrl}
	mock.recorder = &MockMutableWorldStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutableWorldState) EXPECT() *MockMutableWorldStateMockRecorder {
	return m.recorder
}

// AccessEvents mocks base method.
func (m *MockMutableWorldState) AccessEvents() *state.AccessEvents {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessEvents")
	ret0, _ := ret[0].(*state.AccessEvents)
	return ret0
}

// AccessEvents indicates an expected call of AccessEvents.
func (mr *MockMutableWorldStateMockRecorder) AccessEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessEvents", reflect.TypeOf((*MockMutableWorldState)(nil).AccessEvents))
}

// AddAddressToAccessList mocks base method.
func (m *MockMutableWorldState) AddAddressToAccessList(addr common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToAccessList", addr)
}

// AddAddressToAccessList indicates an expected call of AddAddressToAccessList.
func (mr *MockMutableWorldStateMockRecorder) AddAddressToAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToAccessList", reflect.TypeOf((*MockMutableWorldState)(nil).AddAddressToAccessList), addr)
}

// AddBalance mocks base method.
func (m *MockMutableWorldState) AddBalance(addr common.Address, amt *uint256.Int, reason tracing.BalanceChangeReason) uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBalance", addr, amt, reason)
	ret0, _ := ret[0].(uint256.Int)
	return ret0
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockMutableWorldStateMockRecorder) AddBalance(addr, amt, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockMutableWorldState)(nil).AddBalance), addr, amt, reason)
}

// AddLog mocks base method.
func (m *MockMutableWorldState) AddLog(log *types.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", log)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockMutableWorldStateMockRecorder) AddLog(log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockMutableWorldState)(nil).AddLog), log)
}

// AddPreimage mocks base method.
func (m *MockMutableWorldState) AddPreimage(key common.Hash, val []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreimage", key, val)
}

// AddPreimage indicates an expected call of AddPreimage.
func (mr *MockMutableWorldStateMockRecorder) AddPreimage(key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreimage", reflect.TypeOf((*MockMutableWorldState)(nil).AddPreimage), key, val)
}

// AddRefund mocks base method.
func (m *MockMutableWorldState) AddRefund(gas uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRefund", gas)
}

// AddRefund indicates an expected call of AddRefund.
func (mr *MockMutableWorldStateMockRecorder) AddRefund(gas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefund", reflect.TypeOf((*MockMutableWorldState)(nil).AddRefund), gas)
}

// AddSlotToAccessList mocks base method.
func (m *MockMutableWorldState) AddSlotToAccessList(addr common.Address, slot common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToAccessList", addr, slot)
}

// AddSlotToAccessList indicates an expected call of AddSlotToAccessList.
func (mr *MockMutableWorldStateMockRecorder) AddSlotToAccessList(addr, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToAccessList", reflect.TypeOf((*MockMutableWorldState)(nil).AddSlotToAccessList), addr, slot)
}

// AddressInAccessList mocks base method.
func (m *MockMutableWorldState) AddressInAccessList(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressInAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressInAccessList indicates an expected call of AddressInAccessList.
func (mr *MockMutableWorldStateMockRecorder) AddressInAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressInAccessList", reflect.TypeOf((*MockMutableWorldState)(nil).AddressInAccessList), addr)
}

// Commit mocks base method.
func (m *MockMutableWorldState) Commit(block uint64, rootHash common.Hash, deleteEmptyObjects bool) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", block, rootHash, deleteEmptyObjects)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockMutableWorldStateMockRecorder) Commit(block, rootHash, deleteEmptyObjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockMutableWorldState)(nil).Commit), block, rootHash, deleteEmptyObjects)
}

// Copy mocks base method.
func (m *MockMutableWorldState) Copy() MutableWorldState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(MutableWorldState)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockMutableWorldStateMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockMutableWorldState)(nil).Copy))
}

// CreateAccount mocks base method.
func (m *MockMutableWorldState) CreateAccount(addr common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", addr)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockMutableWorldStateMockRecorder) CreateAccount(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockMutableWorldState)(nil).CreateAccount), addr)
}

// CreateContract mocks base method.
func (m *MockMutableWorldState) CreateContract(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateContract", arg0)
}

// CreateContract indicates an expected call of CreateContract.
func (mr *MockMutableWorldStateMockRecorder) CreateContract(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContract", reflect.TypeOf((*MockMutableWorldState)(nil).CreateContract), arg0)
}

// Empty mocks base method.
func (m *MockMutableWorldState) Empty(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockMutableWorldStateMockRecorder) Empty(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockMutableWorldState)(nil).Empty), addr)
}

// Exist mocks base method.
func (m *MockMutableWorldState) Exist(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockMutableWorldStateMockRecorder) Exist(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockMutableWorldState)(nil).Exist), addr)
}

// Finalise mocks base method.
func (m *MockMutableWorldState) Finalise(deleteEmptyObjects bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finalise", deleteEmptyObjects)
}

// Finalise indicates an expected call of Finalise.
func (mr *MockMutableWorldStateMockRecorder) Finalise(deleteEmptyObjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalise", reflect.TypeOf((*MockMutableWorldState)(nil).Finalise), deleteEmptyObjects)
}

// GetBalance mocks base method.
func (m *MockMutableWorldState) GetBalance(addr common.Address) *uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", addr)
	ret0, _ := ret[0].(*uint256.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockMutableWorldStateMockRecorder) GetBalance(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockMutableWorldState)(nil).GetBalance), addr)
}

// GetCode mocks base method.
func (m *MockMutableWorldState) GetCode(addr common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", addr)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockMutableWorldStateMockRecorder) GetCode(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockMutableWorldState)(nil).GetCode), addr)
}

// GetCodeHash mocks base method.
func (m *MockMutableWorldState) GetCodeHash(addr common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", addr)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockMutableWorldStateMockRecorder) GetCodeHash(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockMutableWorldState)(nil).GetCodeHash), addr)
}

// GetCodeSize mocks base method.
func (m *MockMutableWorldState) GetCodeSize(addr common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", addr)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockMutableWorldStateMockRecorder) GetCodeSize(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockMutableWorldState)(nil).GetCodeSize), addr)
}

// GetCommittedState mocks base method.
func (m *MockMutableWorldState) GetCommittedState(addr common.Address, key common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", addr, key)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockMutableWorldStateMockRecorder) GetCommittedState(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockMutableWorldState)(nil).GetCommittedState), addr, key)
}

// GetLogs mocks base method.
func (m *MockMutableWorldState) GetLogs(hash common.Hash, blockNumber uint64, blockHash common.Hash) []*types.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", hash, blockNumber, blockHash)
	ret0, _ := ret[0].([]*types.Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockMutableWorldStateMockRecorder) GetLogs(hash, blockNumber, blockHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockMutableWorldState)(nil).GetLogs), hash, blockNumber, blockHash)
}

// GetNonce mocks base method.
func (m *MockMutableWorldState) GetNonce(addr common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", addr)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockMutableWorldStateMockRecorder) GetNonce(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockMutableWorldState)(nil).GetNonce), addr)
}

// GetRefund mocks base method.
func (m *MockMutableWorldState) GetRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockMutableWorldStateMockRecorder) GetRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockMutableWorldState)(nil).GetRefund))
}

// GetState mocks base method.
func (m *MockMutableWorldState) GetState(addr common.Address, key common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", addr, key)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockMutableWorldStateMockRecorder) GetState(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockMutableWorldState)(nil).GetState), addr, key)
}

// GetStorageRoot mocks base method.
func (m *MockMutableWorldState) GetStorageRoot(addr common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageRoot", addr)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetStorageRoot indicates an expected call of GetStorageRoot.
func (mr *MockMutableWorldStateMockRecorder) GetStorageRoot(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageRoot", reflect.TypeOf((*MockMutableWorldState)(nil).GetStorageRoot), addr)
}

// GetTransientState mocks base method.
func (m *MockMutableWorldState) GetTransientState(addr common.Address, key common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransientState", addr, key)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetTransientState indicates an expected call of GetTransientState.
func (mr *MockMutableWorldStateMockRecorder) GetTransientState(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransientState", reflect.TypeOf((*MockMutableWorldState)(nil).GetTransientState), addr, key)
}

// HasSelfDestructed mocks base method.
func (m *MockMutableWorldState) HasSelfDestructed(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSelfDestructed", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSelfDestructed indicates an expected call of HasSelfDestructed.
func (mr *MockMutableWorldStateMockRecorder) HasSelfDestructed(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSelfDestructed", reflect.TypeOf((*MockMutableWorldState)(nil).HasSelfDestructed), addr)
}

// IntermediateRoot mocks base method.
func (m *MockMutableWorldState) IntermediateRoot(deleteEmptyObjects bool) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntermediateRoot", deleteEmptyObjects)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// IntermediateRoot indicates an expected call of IntermediateRoot.
func (mr *MockMutableWorldStateMockRecorder) IntermediateRoot(deleteEmptyObjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntermediateRoot", reflect.TypeOf((*MockMutableWorldState)(nil).IntermediateRoot), deleteEmptyObjects)
}

// PointCache mocks base method.
func (m *MockMutableWorldState) PointCache() *utils.PointCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PointCache")
	ret0, _ := ret[0].(*utils.PointCache)
	return ret0
}

// PointCache indicates an expected call of PointCache.
func (mr *MockMutableWorldStateMockRecorder) PointCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PointCache", reflect.TypeOf((*MockMutableWorldState)(nil).PointCache))
}

// Prepare mocks base method.
func (m *MockMutableWorldState) Prepare(rules params.Rules, sender, coinbase common.Address, dest *common.Address, precompiles []common.Address, txAccesses types.AccessList) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Prepare", rules, sender, coinbase, dest, precompiles, txAccesses)
}

// Prepare indicates an expected call of Prepare.
func (mr *MockMutableWorldStateMockRecorder) Prepare(rules, sender, coinbase, dest, precompiles, txAccesses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockMutableWorldState)(nil).Prepare), rules, sender, coinbase, dest, precompiles, txAccesses)
}

// RevertToSnapshot mocks base method.
func (m *MockMutableWorldState) RevertToSnapshot(ti int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", ti)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockMutableWorldStateMockRecorder) RevertToSnapshot(ti any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockMutableWorldState)(nil).RevertToSnapshot), ti)
}

// SelfDestruct mocks base method.
func (m *MockMutableWorldState) SelfDestruct(addr common.Address) uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct", addr)
	ret0, _ := ret[0].(uint256.Int)
	return ret0
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockMutableWorldStateMockRecorder) SelfDestruct(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockMutableWorldState)(nil).SelfDestruct), addr)
}

// SelfDestruct6780 mocks base method.
func (m *MockMutableWorldState) SelfDestruct6780(addr common.Address) (uint256.Int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct6780", addr)
	ret0, _ := ret[0].(uint256.Int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SelfDestruct6780 indicates an expected call of SelfDestruct6780.
func (mr *MockMutableWorldStateMockRecorder) SelfDestruct6780(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct6780", reflect.TypeOf((*MockMutableWorldState)(nil).SelfDestruct6780), addr)
}

// SetBalance mocks base method.
func (m *MockMutableWorldState) SetBalance(addr common.Address, amt *uint256.Int, reason tracing.BalanceChangeReason) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", addr, amt, reason)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockMutableWorldStateMockRecorder) SetBalance(addr, amt, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockMutableWorldState)(nil).SetBalance), addr, amt, reason)
}

// SetCode mocks base method.
func (m *MockMutableWorldState) SetCode(addr common.Address, code []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCode", addr, code)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// SetCode indicates an expected call of SetCode.
func (mr *MockMutableWorldStateMockRecorder) SetCode(addr, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockMutableWorldState)(nil).SetCode), addr, code)
}

// SetLogger mocks base method.
func (m *MockMutableWorldState) SetLogger(l *tracing.Hooks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", l)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockMutableWorldStateMockRecorder) SetLogger(l any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockMutableWorldState)(nil).SetLogger), l)
}

// SetNonce mocks base method.
func (m *MockMutableWorldState) SetNonce(addr common.Address, nonce uint64, reason tracing.NonceChangeReason) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", addr, nonce, reason)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockMutableWorldStateMockRecorder) SetNonce(addr, nonce, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockMutableWorldState)(nil).SetNonce), addr, nonce, reason)
}

// SetState mocks base method.
func (m *MockMutableWorldState) SetState(addr common.Address, key, val common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", addr, key, val)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockMutableWorldStateMockRecorder) SetState(addr, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockMutableWorldState)(nil).SetState), addr, key, val)
}

// SetStorage mocks base method.
func (m *MockMutableWorldState) SetStorage(addr common.Address, storage map[common.Hash]common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStorage", addr, storage)
}

// SetStorage indicates an expected call of SetStorage.
func (mr *MockMutableWorldStateMockRecorder) SetStorage(addr, storage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorage", reflect.TypeOf((*MockMutableWorldState)(nil).SetStorage), addr, storage)
}

// SetTransientState mocks base method.
func (m *MockMutableWorldState) SetTransientState(addr common.Address, key, val common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransientState", addr, key, val)
}

// SetTransientState indicates an expected call of SetTransientState.
func (mr *MockMutableWorldStateMockRecorder) SetTransientState(addr, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransientState", reflect.TypeOf((*MockMutableWorldState)(nil).SetTransientState), addr, key, val)
}

// SetTxContext mocks base method.
func (m *MockMutableWorldState) SetTxContext(thash common.Hash, ti int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTxContext", thash, ti)
}

// SetTxContext indicates an expected call of SetTxContext.
func (mr *MockMutableWorldStateMockRecorder) SetTxContext(thash, ti any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTxContext", reflect.TypeOf((*MockMutableWorldState)(nil).SetTxContext), thash, ti)
}

// SlotInAccessList mocks base method.
func (m *MockMutableWorldState) SlotInAccessList(addr common.Address, slot common.Hash) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotInAccessList", addr, slot)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SlotInAccessList indicates an expected call of SlotInAccessList.
func (mr *MockMutableWorldStateMockRecorder) SlotInAccessList(addr, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotInAccessList", reflect.TypeOf((*MockMutableWorldState)(nil).SlotInAccessList), addr, slot)
}

// Snapshot mocks base method.
func (m *MockMutableWorldState) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockMutableWorldStateMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockMutableWorldState)(nil).Snapshot))
}

// SubBalance mocks base method.
func (m *MockMutableWorldState) SubBalance(addr common.Address, amt *uint256.Int, reason tracing.BalanceChangeReason) uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubBalance", addr, amt, reason)
	ret0, _ := ret[0].(uint256.Int)
	return ret0
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockMutableWorldStateMockRecorder) SubBalance(addr, amt, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockMutableWorldState)(nil).SubBalance), addr, amt, reason)
}

// SubRefund mocks base method.
func (m *MockMutableWorldState) SubRefund(gas uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubRefund", gas)
}

// SubRefund indicates an expected call of SubRefund.
func (mr *MockMutableWorldStateMockRecorder) SubRefund(gas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRefund", reflect.TypeOf((*MockMutableWorldState)(nil).SubRefund), gas)
}

// TxIndex mocks base method.
func (m *MockMutableWorldState) TxIndex() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxIndex")
	ret0, _ := ret[0].(int)
	return ret0
}

// TxIndex indicates an expected call of TxIndex.
func (mr *MockMutableWorldStateMockRecorder) TxIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxIndex", reflect.TypeOf((*MockMutableWorldState)(nil).TxIndex))
}

// Witness mocks base method.
func (m *MockMutableWorldState) Witness() *stateless.Witness {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Witness")
	ret0, _ := ret[0].(*stateless.Witness)
	return ret0
}

// Witness indicates an expected call of Witness.
func (mr *MockMutableWorldStateMockRecorder) Witness() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Witness", reflect.TypeOf((*MockMutableWorldState)(nil).Witness))
}

// MockLayeredWorldState is a mock of LayeredWorldState interface.
type MockLayeredWorldState struct {
	ctrl     *gomock.Controller
	recorder *MockLayeredWorldStateMockRecorder
	isgomock struct{}
}

// MockLayeredWorldStateMockRecorder is the mock recorder for MockLayeredWorldState.
type MockLayeredWorldStateMockRecorder struct {
	mock *MockLayeredWorldState
}

// NewMockLayeredWorldState creates a new mock instance.
func NewMockLayeredWorldState(ctrl *gomock.Controller) *MockLayeredWorldState {
	mock := &MockLayeredWorldState{ctrl: ctrl}
	mock.recorder = &MockLayeredWorldStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLayeredWorldState) EXPECT() *MockLayeredWorldStateMockRecorder {
	return m.recorder
}

// AddChild mocks base method.
func (m *MockLayeredWorldState) AddChild(child LayeredWorldState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddChild", child)
}

// AddChild indicates an expected call of AddChild.
func (mr *MockLayeredWorldStateMockRecorder) AddChild(child any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChild", reflect.TypeOf((*MockLayeredWorldState)(nil).AddChild), child)
}

// Destruct mocks base method.
func (m *MockLayeredWorldState) Destruct() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destruct")
}

// Destruct indicates an expected call of Destruct.
func (mr *MockLayeredWorldStateMockRecorder) Destruct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destruct", reflect.TypeOf((*MockLayeredWorldState)(nil).Destruct))
}

// DestructChild mocks base method.
func (m *MockLayeredWorldState) DestructChild(child common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DestructChild", child)
}

// DestructChild indicates an expected call of DestructChild.
func (mr *MockLayeredWorldStateMockRecorder) DestructChild(child any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestructChild", reflect.TypeOf((*MockLayeredWorldState)(nil).DestructChild), child)
}

// GetAccountValue mocks base method.
func (m *MockLayeredWorldState) GetAccountValue(addr common.Address, requireCache bool) types0.AccountValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountValue", addr, requireCache)
	ret0, _ := ret[0].(types0.AccountValue)
	return ret0
}

// GetAccountValue indicates an expected call of GetAccountValue.
func (mr *MockLayeredWorldStateMockRecorder) GetAccountValue(addr, requireCache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountValue", reflect.TypeOf((*MockLayeredWorldState)(nil).GetAccountValue), addr, requireCache)
}

// GetChildren mocks base method.
func (m *MockLayeredWorldState) GetChildren() []LayeredWorldState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildren")
	ret0, _ := ret[0].([]LayeredWorldState)
	return ret0
}

// GetChildren indicates an expected call of GetChildren.
func (mr *MockLayeredWorldStateMockRecorder) GetChildren() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildren", reflect.TypeOf((*MockLayeredWorldState)(nil).GetChildren))
}

// GetCodeByHash mocks base method.
func (m *MockLayeredWorldState) GetCodeByHash(codeHash common.Hash, requireCache bool) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeByHash", codeHash, requireCache)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCodeByHash indicates an expected call of GetCodeByHash.
func (mr *MockLayeredWorldStateMockRecorder) GetCodeByHash(codeHash, requireCache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeByHash", reflect.TypeOf((*MockLayeredWorldState)(nil).GetCodeByHash), codeHash, requireCache)
}

// GetHeight mocks base method.
func (m *MockLayeredWorldState) GetHeight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetHeight indicates an expected call of GetHeight.
func (mr *MockLayeredWorldStateMockRecorder) GetHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeight", reflect.TypeOf((*MockLayeredWorldState)(nil).GetHeight))
}

// GetLayerLog mocks base method.
func (m *MockLayeredWorldState) GetLayerLog() types0.LayerLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerLog")
	ret0, _ := ret[0].(types0.LayerLog)
	return ret0
}

// GetLayerLog indicates an expected call of GetLayerLog.
func (mr *MockLayeredWorldStateMockRecorder) GetLayerLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerLog", reflect.TypeOf((*MockLayeredWorldState)(nil).GetLayerLog))
}

// GetMutable mocks base method.
func (m *MockLayeredWorldState) GetMutable() MutableWorldState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMutable")
	ret0, _ := ret[0].(MutableWorldState)
	return ret0
}

// GetMutable indicates an expected call of GetMutable.
func (mr *MockLayeredWorldStateMockRecorder) GetMutable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMutable", reflect.TypeOf((*MockLayeredWorldState)(nil).GetMutable))
}

// GetReadOnly mocks base method.
func (m *MockLayeredWorldState) GetReadOnly() ReadOnlyWorldState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadOnly")
	ret0, _ := ret[0].(ReadOnlyWorldState)
	return ret0
}

// GetReadOnly indicates an expected call of GetReadOnly.
func (mr *MockLayeredWorldStateMockRecorder) GetReadOnly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadOnly", reflect.TypeOf((*MockLayeredWorldState)(nil).GetReadOnly))
}

// GetRootHash mocks base method.
func (m *MockLayeredWorldState) GetRootHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetRootHash indicates an expected call of GetRootHash.
func (mr *MockLayeredWorldStateMockRecorder) GetRootHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootHash", reflect.TypeOf((*MockLayeredWorldState)(nil).GetRootHash))
}

// GetStorageByVersion mocks base method.
func (m *MockLayeredWorldState) GetStorageByVersion(addr common.Address, version uint64, key common.Hash, requireCache bool) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageByVersion", addr, version, key, requireCache)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetStorageByVersion indicates an expected call of GetStorageByVersion.
func (mr *MockLayeredWorldStateMockRecorder) GetStorageByVersion(addr, version, key, requireCache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageByVersion", reflect.TypeOf((*MockLayeredWorldState)(nil).GetStorageByVersion), addr, version, key, requireCache)
}

// HandlePrune mocks base method.
func (m *MockLayeredWorldState) HandlePrune(pruningRoute []common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePrune", pruningRoute)
}

// HandlePrune indicates an expected call of HandlePrune.
func (mr *MockLayeredWorldStateMockRecorder) HandlePrune(pruningRoute any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePrune", reflect.TypeOf((*MockLayeredWorldState)(nil).HandlePrune), pruningRoute)
}

// UpdateParent mocks base method.
func (m *MockLayeredWorldState) UpdateParent(parent LayeredWorldState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateParent", parent)
}

// UpdateParent indicates an expected call of UpdateParent.
func (mr *MockLayeredWorldStateMockRecorder) UpdateParent(parent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParent", reflect.TypeOf((*MockLayeredWorldState)(nil).UpdateParent), parent)
}

// MockLayeredWorldStateArchive is a mock of LayeredWorldStateArchive interface.
type MockLayeredWorldStateArchive struct {
	ctrl     *gomock.Controller
	recorder *MockLayeredWorldStateArchiveMockRecorder
	isgomock struct{}
}

// MockLayeredWorldStateArchiveMockRecorder is the mock recorder for MockLayeredWorldStateArchive.
type MockLayeredWorldStateArchiveMockRecorder struct {
	mock *MockLayeredWorldStateArchive
}

// NewMockLayeredWorldStateArchive creates a new mock instance.
func NewMockLayeredWorldStateArchive(ctrl *gomock.Controller) *MockLayeredWorldStateArchive {
	mock := &MockLayeredWorldStateArchive{ctrl: ctrl}
	mock.recorder = &MockLayeredWorldStateArchiveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLayeredWorldStateArchive) EXPECT() *MockLayeredWorldStateArchiveMockRecorder {
	return m.recorder
}

// Deregister mocks base method.
func (m *MockLayeredWorldStateArchive) Deregister(height uint64, root common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Deregister", height, root)
}

// Deregister indicates an expected call of Deregister.
func (mr *MockLayeredWorldStateArchiveMockRecorder) Deregister(height, root any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deregister", reflect.TypeOf((*MockLayeredWorldStateArchive)(nil).Deregister), height, root)
}

// GetChainConfig mocks base method.
func (m *MockLayeredWorldStateArchive) GetChainConfig() *params.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainConfig")
	ret0, _ := ret[0].(*params.ChainConfig)
	return ret0
}

// GetChainConfig indicates an expected call of GetChainConfig.
func (mr *MockLayeredWorldStateArchiveMockRecorder) GetChainConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainConfig", reflect.TypeOf((*MockLayeredWorldStateArchive)(nil).GetChainConfig))
}

// GetLayared mocks base method.
func (m *MockLayeredWorldStateArchive) GetLayared(height uint64, root common.Hash) (LayeredWorldState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayared", height, root)
	ret0, _ := ret[0].(LayeredWorldState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayared indicates an expected call of GetLayared.
func (mr *MockLayeredWorldStateArchiveMockRecorder) GetLayared(height, root any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayared", reflect.TypeOf((*MockLayeredWorldStateArchive)(nil).GetLayared), height, root)
}

// GetMaxLayerToRetain mocks base method.
func (m *MockLayeredWorldStateArchive) GetMaxLayerToRetain() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxLayerToRetain")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMaxLayerToRetain indicates an expected call of GetMaxLayerToRetain.
func (mr *MockLayeredWorldStateArchiveMockRecorder) GetMaxLayerToRetain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxLayerToRetain", reflect.TypeOf((*MockLayeredWorldStateArchive)(nil).GetMaxLayerToRetain))
}

// GetMutable mocks base method.
func (m *MockLayeredWorldStateArchive) GetMutable(height uint64, root common.Hash) (MutableWorldState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMutable", height, root)
	ret0, _ := ret[0].(MutableWorldState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMutable indicates an expected call of GetMutable.
func (mr *MockLayeredWorldStateArchiveMockRecorder) GetMutable(height, root any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMutable", reflect.TypeOf((*MockLayeredWorldStateArchive)(nil).GetMutable), height, root)
}

// GetPruningFrequency mocks base method.
func (m *MockLayeredWorldStateArchive) GetPruningFrequency() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPruningFrequency")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPruningFrequency indicates an expected call of GetPruningFrequency.
func (mr *MockLayeredWorldStateArchiveMockRecorder) GetPruningFrequency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPruningFrequency", reflect.TypeOf((*MockLayeredWorldStateArchive)(nil).GetPruningFrequency))
}

// Has mocks base method.
func (m *MockLayeredWorldStateArchive) Has(height uint64, root common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", height, root)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockLayeredWorldStateArchiveMockRecorder) Has(height, root any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockLayeredWorldStateArchive)(nil).Has), height, root)
}

// Register mocks base method.
func (m *MockLayeredWorldStateArchive) Register(height uint64, root common.Hash, worldState LayeredWorldState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", height, root, worldState)
}

// Register indicates an expected call of Register.
func (mr *MockLayeredWorldStateArchiveMockRecorder) Register(height, root, worldState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockLayeredWorldStateArchive)(nil).Register), height, root, worldState)
}

// SetMaxLayerToRetain mocks base method.
func (m *MockLayeredWorldStateArchive) SetMaxLayerToRetain(maxLayerToRetain uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxLayerToRetain", maxLayerToRetain)
}

// SetMaxLayerToRetain indicates an expected call of SetMaxLayerToRetain.
func (mr *MockLayeredWorldStateArchiveMockRecorder) SetMaxLayerToRetain(maxLayerToRetain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxLayerToRetain", reflect.TypeOf((*MockLayeredWorldStateArchive)(nil).SetMaxLayerToRetain), maxLayerToRetain)
}

// SetPruningFrequency mocks base method.
func (m *MockLayeredWorldStateArchive) SetPruningFrequency(pruningFrequency uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPruningFrequency", pruningFrequency)
}

// SetPruningFrequency indicates an expected call of SetPruningFrequency.
func (mr *MockLayeredWorldStateArchiveMockRecorder) SetPruningFrequency(pruningFrequency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPruningFrequency", reflect.TypeOf((*MockLayeredWorldStateArchive)(nil).SetPruningFrequency), pruningFrequency)
}
