// Code generated by MockGen. DO NOT EDIT.
// Source: blockchain.go
//
// Generated by this command:
//
//	mockgen -source=blockchain.go -destination=blockchain_mock.go -self_package=github.com/wcgcyx/teler/blockchain --package blockchain
//

// Package blockchain is a generated GoMock package.
package blockchain

import (
	context "context"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockchain is a mock of Blockchain interface.
type MockBlockchain struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainMockRecorder
	isgomock struct{}
}

// MockBlockchainMockRecorder is the mock recorder for MockBlockchain.
type MockBlockchainMockRecorder struct {
	mock *MockBlockchain
}

// NewMockBlockchain creates a new mock instance.
func NewMockBlockchain(ctrl *gomock.Controller) *MockBlockchain {
	mock := &MockBlockchain{ctrl: ctrl}
	mock.recorder = &MockBlockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockchain) EXPECT() *MockBlockchainMockRecorder {
	return m.recorder
}

// AddBlock mocks base method.
func (m *MockBlockchain) AddBlock(arg0 context.Context, arg1 *types.Block, arg2 types.Receipts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBlock indicates an expected call of AddBlock.
func (mr *MockBlockchainMockRecorder) AddBlock(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlock", reflect.TypeOf((*MockBlockchain)(nil).AddBlock), arg0, arg1, arg2)
}

// GetBlockByHash mocks base method.
func (m *MockBlockchain) GetBlockByHash(arg0 context.Context, arg1 common.Hash) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", arg0, arg1)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockBlockchainMockRecorder) GetBlockByHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockchain)(nil).GetBlockByHash), arg0, arg1)
}

// GetBlockByNumber mocks base method.
func (m *MockBlockchain) GetBlockByNumber(arg0 context.Context, arg1 uint64) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", arg0, arg1)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber.
func (mr *MockBlockchainMockRecorder) GetBlockByNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockBlockchain)(nil).GetBlockByNumber), arg0, arg1)
}

// GetFinalized mocks base method.
func (m *MockBlockchain) GetFinalized(arg0 context.Context) (*types.Block, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalized", arg0)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFinalized indicates an expected call of GetFinalized.
func (mr *MockBlockchainMockRecorder) GetFinalized(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalized", reflect.TypeOf((*MockBlockchain)(nil).GetFinalized), arg0)
}

// GetHead mocks base method.
func (m *MockBlockchain) GetHead(arg0 context.Context) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHead", arg0)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHead indicates an expected call of GetHead.
func (mr *MockBlockchainMockRecorder) GetHead(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHead", reflect.TypeOf((*MockBlockchain)(nil).GetHead), arg0)
}

// GetHeaderByHash mocks base method.
func (m *MockBlockchain) GetHeaderByHash(arg0 context.Context, arg1 common.Hash) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByHash", arg0, arg1)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash.
func (mr *MockBlockchainMockRecorder) GetHeaderByHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockBlockchain)(nil).GetHeaderByHash), arg0, arg1)
}

// GetHeaderByNumber mocks base method.
func (m *MockBlockchain) GetHeaderByNumber(arg0 context.Context, arg1 uint64) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByNumber", arg0, arg1)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber.
func (mr *MockBlockchainMockRecorder) GetHeaderByNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockBlockchain)(nil).GetHeaderByNumber), arg0, arg1)
}

// GetReceipt mocks base method.
func (m *MockBlockchain) GetReceipt(arg0 context.Context, arg1 common.Hash) (*types.Receipt, common.Hash, uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", arg0, arg1)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(common.Hash)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetReceipt indicates an expected call of GetReceipt.
func (mr *MockBlockchainMockRecorder) GetReceipt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockBlockchain)(nil).GetReceipt), arg0, arg1)
}

// GetSafe mocks base method.
func (m *MockBlockchain) GetSafe(arg0 context.Context) (*types.Block, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSafe", arg0)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSafe indicates an expected call of GetSafe.
func (mr *MockBlockchainMockRecorder) GetSafe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSafe", reflect.TypeOf((*MockBlockchain)(nil).GetSafe), arg0)
}

// GetTransaction mocks base method.
func (m *MockBlockchain) GetTransaction(arg0 context.Context, arg1 common.Hash) (*types.Transaction, common.Hash, uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(common.Hash)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockBlockchainMockRecorder) GetTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockBlockchain)(nil).GetTransaction), arg0, arg1)
}

// HasBlock mocks base method.
func (m *MockBlockchain) HasBlock(arg0 context.Context, arg1 common.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBlock", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasBlock indicates an expected call of HasBlock.
func (mr *MockBlockchainMockRecorder) HasBlock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBlock", reflect.TypeOf((*MockBlockchain)(nil).HasBlock), arg0, arg1)
}

// SetFinalized mocks base method.
func (m *MockBlockchain) SetFinalized(arg0 context.Context, arg1 common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinalized", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFinalized indicates an expected call of SetFinalized.
func (mr *MockBlockchainMockRecorder) SetFinalized(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalized", reflect.TypeOf((*MockBlockchain)(nil).SetFinalized), arg0, arg1)
}

// SetHead mocks base method.
func (m *MockBlockchain) SetHead(arg0 context.Context, arg1 common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHead indicates an expected call of SetHead.
func (mr *MockBlockchainMockRecorder) SetHead(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHead", reflect.TypeOf((*MockBlockchain)(nil).SetHead), arg0, arg1)
}

// SetSafe mocks base method.
func (m *MockBlockchain) SetSafe(arg0 context.Context, arg1 common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSafe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSafe indicates an expected call of SetSafe.
func (mr *MockBlockchainMockRecorder) SetSafe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSafe", reflect.TypeOf((*MockBlockchain)(nil).SetSafe), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockBlockchain) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockBlockchainMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBlockchain)(nil).Shutdown))
}
