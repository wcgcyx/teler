// Code generated by MockGen. DO NOT EDIT.
// Source: blocksource.go
//
// Generated by this command:
//
//	mockgen -source=blocksource.go -destination=blocksource_mock.go -self_package=github.com/wcgcyx/teler/sync --package sync
//

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockSource is a mock of BlockSource interface.
type MockBlockSource struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSourceMockRecorder
	isgomock struct{}
}

// MockBlockSourceMockRecorder is the mock recorder for MockBlockSource.
type MockBlockSourceMockRecorder struct {
	mock *MockBlockSource
}

// NewMockBlockSource creates a new mock instance.
func NewMockBlockSource(ctrl *gomock.Controller) *MockBlockSource {
	mock := &MockBlockSource{ctrl: ctrl}
	mock.recorder = &MockBlockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockSource) EXPECT() *MockBlockSourceMockRecorder {
	return m.recorder
}

// BlockByHash mocks base method.
func (m *MockBlockSource) BlockByHash(ctx context.Context, hash common.Hash) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHash", ctx, hash)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByHash indicates an expected call of BlockByHash.
func (mr *MockBlockSourceMockRecorder) BlockByHash(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHash", reflect.TypeOf((*MockBlockSource)(nil).BlockByHash), ctx, hash)
}

// BlockByNumber mocks base method.
func (m *MockBlockSource) BlockByNumber(ctx context.Context, number *big.Int) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", ctx, number)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber.
func (mr *MockBlockSourceMockRecorder) BlockByNumber(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockBlockSource)(nil).BlockByNumber), ctx, number)
}

// Close mocks base method.
func (m *MockBlockSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBlockSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBlockSource)(nil).Close))
}

// HeaderByNumber mocks base method.
func (m *MockBlockSource) HeaderByNumber(ctx context.Context, number *big.Int) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByNumber", ctx, number)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByNumber indicates an expected call of HeaderByNumber.
func (mr *MockBlockSourceMockRecorder) HeaderByNumber(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByNumber", reflect.TypeOf((*MockBlockSource)(nil).HeaderByNumber), ctx, number)
}
