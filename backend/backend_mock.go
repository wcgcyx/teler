// Code generated by MockGen. DO NOT EDIT.
// Source: backend.go
//
// Generated by this command:
//
//	mockgen -source=backend.go -destination=backend_mock.go -self_package=github.com/wcgcyx/teler/backend --package backend
//

// Package backend is a generated GoMock package.
package backend

import (
	context "context"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	core "github.com/ethereum/go-ethereum/core"
	types "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	params "github.com/ethereum/go-ethereum/params"
	blockchain "github.com/wcgcyx/teler/blockchain"
	processor "github.com/wcgcyx/teler/processor"
	worldstate "github.com/wcgcyx/teler/worldstate"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
	isgomock struct{}
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// Blockchain mocks base method.
func (m *MockBackend) Blockchain() blockchain.Blockchain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blockchain")
	ret0, _ := ret[0].(blockchain.Blockchain)
	return ret0
}

// Blockchain indicates an expected call of Blockchain.
func (mr *MockBackendMockRecorder) Blockchain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blockchain", reflect.TypeOf((*MockBackend)(nil).Blockchain))
}

// ChainConfig mocks base method.
func (m *MockBackend) ChainConfig() *params.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainConfig")
	ret0, _ := ret[0].(*params.ChainConfig)
	return ret0
}

// ChainConfig indicates an expected call of ChainConfig.
func (mr *MockBackendMockRecorder) ChainConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainConfig", reflect.TypeOf((*MockBackend)(nil).ChainConfig))
}

// DebugDestructStateChild mocks base method.
func (m *MockBackend) DebugDestructStateChild(height uint64, root, child common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugDestructStateChild", height, root, child)
	ret0, _ := ret[0].(error)
	return ret0
}

// DebugDestructStateChild indicates an expected call of DebugDestructStateChild.
func (mr *MockBackendMockRecorder) DebugDestructStateChild(height, root, child any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugDestructStateChild", reflect.TypeOf((*MockBackend)(nil).DebugDestructStateChild), height, root, child)
}

// DebugForceProcessBlock mocks base method.
func (m *MockBackend) DebugForceProcessBlock(ctx context.Context, blk *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugForceProcessBlock", ctx, blk)
	ret0, _ := ret[0].(error)
	return ret0
}

// DebugForceProcessBlock indicates an expected call of DebugForceProcessBlock.
func (mr *MockBackendMockRecorder) DebugForceProcessBlock(ctx, blk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugForceProcessBlock", reflect.TypeOf((*MockBackend)(nil).DebugForceProcessBlock), ctx, blk)
}

// ImportBlock mocks base method.
func (m *MockBackend) ImportBlock(ctx context.Context, blk, prvBlk *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportBlock", ctx, blk, prvBlk)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportBlock indicates an expected call of ImportBlock.
func (mr *MockBackendMockRecorder) ImportBlock(ctx, blk, prvBlk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportBlock", reflect.TypeOf((*MockBackend)(nil).ImportBlock), ctx, blk, prvBlk)
}

// ImportBlocks mocks base method.
func (m *MockBackend) ImportBlocks(ctx context.Context, blks []*types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportBlocks", ctx, blks)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportBlocks indicates an expected call of ImportBlocks.
func (mr *MockBackendMockRecorder) ImportBlocks(ctx, blks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportBlocks", reflect.TypeOf((*MockBackend)(nil).ImportBlocks), ctx, blks)
}

// Processor mocks base method.
func (m *MockBackend) Processor() *processor.BlockProcessor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Processor")
	ret0, _ := ret[0].(*processor.BlockProcessor)
	return ret0
}

// Processor indicates an expected call of Processor.
func (mr *MockBackendMockRecorder) Processor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processor", reflect.TypeOf((*MockBackend)(nil).Processor))
}

// SetFinalizedTag mocks base method.
func (m *MockBackend) SetFinalizedTag(ctx context.Context, finalized common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinalizedTag", ctx, finalized)
}

// SetFinalizedTag indicates an expected call of SetFinalizedTag.
func (mr *MockBackendMockRecorder) SetFinalizedTag(ctx, finalized any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizedTag", reflect.TypeOf((*MockBackend)(nil).SetFinalizedTag), ctx, finalized)
}

// SetSafeTag mocks base method.
func (m *MockBackend) SetSafeTag(ctx context.Context, safe common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSafeTag", ctx, safe)
}

// SetSafeTag indicates an expected call of SetSafeTag.
func (mr *MockBackendMockRecorder) SetSafeTag(ctx, safe any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSafeTag", reflect.TypeOf((*MockBackend)(nil).SetSafeTag), ctx, safe)
}

// Shutdown mocks base method.
func (m *MockBackend) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockBackendMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBackend)(nil).Shutdown))
}

// StateArchive mocks base method.
func (m *MockBackend) StateArchive() worldstate.LayeredWorldStateArchive {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateArchive")
	ret0, _ := ret[0].(worldstate.LayeredWorldStateArchive)
	return ret0
}

// StateArchive indicates an expected call of StateArchive.
func (mr *MockBackendMockRecorder) StateArchive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateArchive", reflect.TypeOf((*MockBackend)(nil).StateArchive))
}

// SubscribeChainHeadEvent mocks base method.
func (m *MockBackend) SubscribeChainHeadEvent(ch chan<- core.ChainHeadEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeChainHeadEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeChainHeadEvent indicates an expected call of SubscribeChainHeadEvent.
func (mr *MockBackendMockRecorder) SubscribeChainHeadEvent(ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChainHeadEvent", reflect.TypeOf((*MockBackend)(nil).SubscribeChainHeadEvent), ch)
}
