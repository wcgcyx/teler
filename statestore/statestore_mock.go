// Code generated by MockGen. DO NOT EDIT.
// Source: statestore.go
//
// Generated by this command:
//
//	mockgen -source=statestore.go -destination=statestore_mock.go -self_package=github.com/wcgcyx/teler/statestore --package statestore
//

// Package statestore is a generated GoMock package.
package statestore

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/wcgcyx/teler/types"
	gomock "go.uber.org/mock/gomock"
)

// MockStateStore is a mock of StateStore interface.
type MockStateStore struct {
	ctrl     *gomock.Controller
	recorder *MockStateStoreMockRecorder
	isgomock struct{}
}

// MockStateStoreMockRecorder is the mock recorder for MockStateStore.
type MockStateStoreMockRecorder struct {
	mock *MockStateStore
}

// NewMockStateStore creates a new mock instance.
func NewMockStateStore(ctrl *gomock.Controller) *MockStateStore {
	mock := &MockStateStore{ctrl: ctrl}
	mock.recorder = &MockStateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateStore) EXPECT() *MockStateStoreMockRecorder {
	return m.recorder
}

// GetAccountValue mocks base method.
func (m *MockStateStore) GetAccountValue(addr common.Address) (types.AccountValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountValue", addr)
	ret0, _ := ret[0].(types.AccountValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountValue indicates an expected call of GetAccountValue.
func (mr *MockStateStoreMockRecorder) GetAccountValue(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountValue", reflect.TypeOf((*MockStateStore)(nil).GetAccountValue), addr)
}

// GetChildren mocks base method.
func (m *MockStateStore) GetChildren(height uint64, rootHash common.Hash) ([]common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildren", height, rootHash)
	ret0, _ := ret[0].([]common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildren indicates an expected call of GetChildren.
func (mr *MockStateStoreMockRecorder) GetChildren(height, rootHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildren", reflect.TypeOf((*MockStateStore)(nil).GetChildren), height, rootHash)
}

// GetCodeByHash mocks base method.
func (m *MockStateStore) GetCodeByHash(codeHash common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeByHash", codeHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeByHash indicates an expected call of GetCodeByHash.
func (mr *MockStateStoreMockRecorder) GetCodeByHash(codeHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeByHash", reflect.TypeOf((*MockStateStore)(nil).GetCodeByHash), codeHash)
}

// GetLayerLog mocks base method.
func (m *MockStateStore) GetLayerLog(height uint64, rootHash common.Hash) (types.LayerLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerLog", height, rootHash)
	ret0, _ := ret[0].(types.LayerLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerLog indicates an expected call of GetLayerLog.
func (mr *MockStateStoreMockRecorder) GetLayerLog(height, rootHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerLog", reflect.TypeOf((*MockStateStore)(nil).GetLayerLog), height, rootHash)
}

// GetPersistedHeight mocks base method.
func (m *MockStateStore) GetPersistedHeight() (uint64, common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistedHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(common.Hash)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPersistedHeight indicates an expected call of GetPersistedHeight.
func (mr *MockStateStoreMockRecorder) GetPersistedHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistedHeight", reflect.TypeOf((*MockStateStore)(nil).GetPersistedHeight))
}

// GetStorageByVersion mocks base method.
func (m *MockStateStore) GetStorageByVersion(addr common.Address, version uint64, key common.Hash) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageByVersion", addr, version, key)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageByVersion indicates an expected call of GetStorageByVersion.
func (mr *MockStateStoreMockRecorder) GetStorageByVersion(addr, version, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageByVersion", reflect.TypeOf((*MockStateStore)(nil).GetStorageByVersion), addr, version, key)
}

// NewTransaction mocks base method.
func (m *MockStateStore) NewTransaction() (Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction")
	ret0, _ := ret[0].(Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockStateStoreMockRecorder) NewTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockStateStore)(nil).NewTransaction))
}

// Shutdown mocks base method.
func (m *MockStateStore) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockStateStoreMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockStateStore)(nil).Shutdown))
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// DeleteChildren mocks base method.
func (m *MockTransaction) DeleteChildren(height uint64, rootHash common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChildren", height, rootHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChildren indicates an expected call of DeleteChildren.
func (mr *MockTransactionMockRecorder) DeleteChildren(height, rootHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChildren", reflect.TypeOf((*MockTransaction)(nil).DeleteChildren), height, rootHash)
}

// DeleteLayerLog mocks base method.
func (m *MockTransaction) DeleteLayerLog(height uint64, rootHash common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLayerLog", height, rootHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLayerLog indicates an expected call of DeleteLayerLog.
func (mr *MockTransactionMockRecorder) DeleteLayerLog(height, rootHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLayerLog", reflect.TypeOf((*MockTransaction)(nil).DeleteLayerLog), height, rootHash)
}

// Discard mocks base method.
func (m *MockTransaction) Discard() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Discard")
}

// Discard indicates an expected call of Discard.
func (mr *MockTransactionMockRecorder) Discard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockTransaction)(nil).Discard))
}

// PersistLayerLog mocks base method.
func (m *MockTransaction) PersistLayerLog(layerLog types.LayerLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistLayerLog", layerLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistLayerLog indicates an expected call of PersistLayerLog.
func (mr *MockTransactionMockRecorder) PersistLayerLog(layerLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistLayerLog", reflect.TypeOf((*MockTransaction)(nil).PersistLayerLog), layerLog)
}

// PutChildren mocks base method.
func (m *MockTransaction) PutChildren(height uint64, rootHash common.Hash, children []common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutChildren", height, rootHash, children)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutChildren indicates an expected call of PutChildren.
func (mr *MockTransactionMockRecorder) PutChildren(height, rootHash, children any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutChildren", reflect.TypeOf((*MockTransaction)(nil).PutChildren), height, rootHash, children)
}

// PutLayerLog mocks base method.
func (m *MockTransaction) PutLayerLog(layerLog types.LayerLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLayerLog", layerLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutLayerLog indicates an expected call of PutLayerLog.
func (mr *MockTransactionMockRecorder) PutLayerLog(layerLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLayerLog", reflect.TypeOf((*MockTransaction)(nil).PutLayerLog), layerLog)
}
